/**
 * Radix Gateway API - Babylon
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers, and for light queries from front-end dApps. For exchange/asset integrations, back-end dApp integrations, or simple use cases, you should consider using the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  All responses may have additional fields added at any release, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.  When the Radix protocol is updated, new functionality may be added, and so discriminated unions returned by the API may need to be updated to have new variants added, corresponding to the updated data. Clients may need to update in advance to be able to handle these new variants when a protocol update comes out.  On the very rare occasions we need to make breaking changes to the API, these will be warned in advance with deprecation notices on previous versions. These deprecation notices will include a safe migration path. Deprecation notes or breaking changes will be flagged clearly in release notes for new versions of the Gateway.  The Gateway DB schema is not subject to any compatibility guarantees, and may be changed at any release. DB changes will be flagged in the release notes so clients doing custom DB integrations can prepare.
 *
 * The version of the OpenAPI document: v1.10.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { StreamTransactionsRequestAllOfManifestClassFilter } from './StreamTransactionsRequestAllOfManifestClassFilter';
import type { StreamTransactionsRequestEventFilterItem } from './StreamTransactionsRequestEventFilterItem';
import type { TransactionDetailsOptIns } from './TransactionDetailsOptIns';
/**
 *
 * @export
 * @interface StreamTransactionsRequestAllOf
 */
export interface StreamTransactionsRequestAllOf {
    /**
     * Limit returned transactions by their kind. Defaults to `user`.
     * @type {string}
     * @memberof StreamTransactionsRequestAllOf
     */
    kind_filter?: StreamTransactionsRequestAllOfKindFilterEnum;
    /**
     * Allows specifying an array of account addresses. If specified, the response will contain only transactions with a manifest containing withdrawals from the given accounts.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    manifest_accounts_withdrawn_from_filter?: Array<string>;
    /**
     * Similar to `manifest_accounts_withdrawn_from_filter`, but will return only transactions with a manifest containing deposits to the given accounts.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    manifest_accounts_deposited_into_filter?: Array<string>;
    /**
     * Allows specifying array of badge resource addresses. If specified, the response will contain only transactions where the given badges were presented.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    manifest_badges_presented_filter?: Array<string>;
    /**
     * Allows specifying array of resource addresses. If specified, the response will contain only transactions containing the given resources in the manifest (regardless of their usage). We recommend that integrators use `balance_change_resources_filter` in most cases, as it also captures resource changes that are not specified in the manifest.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    manifest_resources_filter?: Array<string>;
    /**
     * Allows specifying an array of global addresses. If specified, the response will contain transactions that affected all of the given global entities. A global entity is marked as "affected" by a transaction if any of its state (or its descendents' state) was modified as a result of the transaction. For performance reasons consensus manager and transaction tracker are excluded from that filter.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    affected_global_entities_filter?: Array<string>;
    /**
     * Filters the transaction stream to transactions which emitted at least one event matching each filter (each filter can be satisfied by a different event). Currently *only* deposit and withdrawal events emitted by an internal vault entity are tracked. For the purpose of filtering, the emitter address is replaced by the global ancestor of the emitter, for example, the top-level account / component which contains the vault which emitted the event.
     * @type {Array<StreamTransactionsRequestEventFilterItem>}
     * @memberof StreamTransactionsRequestAllOf
     */
    events_filter?: Array<StreamTransactionsRequestEventFilterItem>;
    /**
     * Allows specifying an array of account addresses. If specified, the response will contain only transactions that, for all specified accounts, contain manifest method calls to that account which require the owner role. See the [account docs](https://docs.radixdlt.com/docs/account) for more information.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    accounts_with_manifest_owner_method_calls?: Array<string>;
    /**
     * Allows specifying an array of account addresses. If specified, the response will contain only transactions that, for all specified accounts, do NOT contain manifest method calls to that account which require owner role. See the [account docs](https://docs.radixdlt.com/docs/account) for more information.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    accounts_without_manifest_owner_method_calls?: Array<string>;
    /**
     *
     * @type {StreamTransactionsRequestAllOfManifestClassFilter}
     * @memberof StreamTransactionsRequestAllOf
     */
    manifest_class_filter?: StreamTransactionsRequestAllOfManifestClassFilter;
    /**
     * Allows specifying an array of global addresses. If specified, the response will contain transactions in which all entities emitted events. If an event was published by an internal entity, it is going to be indexed as it is a global ancestor. For performance reasons events published by consensus manager and native XRD resource are excluded from that filter.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    event_global_emitters_filter?: Array<string>;
    /**
     * Allows filtering to transactions which included non-fee related balance changes for all provided resources. Defaults to `[]`. We recommend that integrators use this instead of the `manifest_resources_filter` in most cases, as it also captures resource changes that are not specified in the manifest.
     * @type {Array<string>}
     * @memberof StreamTransactionsRequestAllOf
     */
    balance_change_resources_filter?: Array<string>;
    /**
     * Allows filtering by the transaction commit status (`Success`, `Failure`, `All`). Defaults to `All`.
     * @type {string}
     * @memberof StreamTransactionsRequestAllOf
     */
    transaction_status_filter?: StreamTransactionsRequestAllOfTransactionStatusFilterEnum;
    /**
     * Configures the order of returned result set. Defaults to `desc`.
     * @type {string}
     * @memberof StreamTransactionsRequestAllOf
     */
    order?: StreamTransactionsRequestAllOfOrderEnum;
    /**
     *
     * @type {TransactionDetailsOptIns}
     * @memberof StreamTransactionsRequestAllOf
     */
    opt_ins?: TransactionDetailsOptIns;
}
/**
 * @export
 */
export declare const StreamTransactionsRequestAllOfKindFilterEnum: {
    readonly User: "User";
    readonly EpochChange: "EpochChange";
    readonly All: "All";
};
export type StreamTransactionsRequestAllOfKindFilterEnum = typeof StreamTransactionsRequestAllOfKindFilterEnum[keyof typeof StreamTransactionsRequestAllOfKindFilterEnum];
/**
 * @export
 */
export declare const StreamTransactionsRequestAllOfTransactionStatusFilterEnum: {
    readonly Success: "Success";
    readonly Failure: "Failure";
    readonly All: "All";
};
export type StreamTransactionsRequestAllOfTransactionStatusFilterEnum = typeof StreamTransactionsRequestAllOfTransactionStatusFilterEnum[keyof typeof StreamTransactionsRequestAllOfTransactionStatusFilterEnum];
/**
 * @export
 */
export declare const StreamTransactionsRequestAllOfOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type StreamTransactionsRequestAllOfOrderEnum = typeof StreamTransactionsRequestAllOfOrderEnum[keyof typeof StreamTransactionsRequestAllOfOrderEnum];
/**
 * Check if a given object implements the StreamTransactionsRequestAllOf interface.
 */
export declare function instanceOfStreamTransactionsRequestAllOf(value: object): boolean;
export declare function StreamTransactionsRequestAllOfFromJSON(json: any): StreamTransactionsRequestAllOf;
export declare function StreamTransactionsRequestAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamTransactionsRequestAllOf;
export declare function StreamTransactionsRequestAllOfToJSON(value?: StreamTransactionsRequestAllOf | null): any;
