/**
 * Radix Gateway API - Babylon
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers, and for light queries from front-end dApps. For exchange/asset integrations, back-end dApp integrations, or simple use cases, you should consider using the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  All responses may have additional fields added at any release, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.  When the Radix protocol is updated, new functionality may be added, and so discriminated unions returned by the API may need to be updated to have new variants added, corresponding to the updated data. Clients may need to update in advance to be able to handle these new variants when a protocol update comes out.  On the very rare occasions we need to make breaking changes to the API, these will be warned in advance with deprecation notices on previous versions. These deprecation notices will include a safe migration path. Deprecation notes or breaking changes will be flagged clearly in release notes for new versions of the Gateway.  The Gateway DB schema is not subject to any compatibility guarantees, and may be changed at any release. DB changes will be flagged in the release notes so clients doing custom DB integrations can prepare.
 *
 * The version of the OpenAPI document: v1.10.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AccountDepositPreValidationRequest, AccountDepositPreValidationResponse, TransactionCommittedDetailsRequest, TransactionCommittedDetailsResponse, TransactionConstructionResponse, TransactionPreviewRequest, TransactionPreviewResponse, TransactionPreviewV2Request, TransactionPreviewV2Response, TransactionStatusRequest, TransactionStatusResponse, TransactionSubintentStatusRequest, TransactionSubintentStatusResponse, TransactionSubmitRequest, TransactionSubmitResponse } from '../models';
export interface AccountDepositPreValidationOperationRequest {
    accountDepositPreValidationRequest: AccountDepositPreValidationRequest;
}
export interface TransactionCommittedDetailsOperationRequest {
    transactionCommittedDetailsRequest: TransactionCommittedDetailsRequest;
}
export interface TransactionPreviewOperationRequest {
    transactionPreviewRequest: TransactionPreviewRequest;
}
export interface TransactionPreviewV2OperationRequest {
    transactionPreviewV2Request: TransactionPreviewV2Request;
}
export interface TransactionStatusOperationRequest {
    transactionStatusRequest: TransactionStatusRequest;
}
export interface TransactionSubintentStatusOperationRequest {
    transactionSubintentStatusRequest: TransactionSubintentStatusRequest;
}
export interface TransactionSubmitOperationRequest {
    transactionSubmitRequest: TransactionSubmitRequest;
}
/**
 *
 */
export declare class TransactionApi extends runtime.BaseAPI {
    /**
     * Helper endpoint that allows pre-validation if a deposit of certain resources to a given account can succeed or not. It is only meant for pre-validation usage, it does not guarantee that execution will succeed.
     * PreValidate deposit of resources to an account
     */
    accountDepositPreValidationRaw(requestParameters: AccountDepositPreValidationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDepositPreValidationResponse>>;
    /**
     * Helper endpoint that allows pre-validation if a deposit of certain resources to a given account can succeed or not. It is only meant for pre-validation usage, it does not guarantee that execution will succeed.
     * PreValidate deposit of resources to an account
     */
    accountDepositPreValidation(requestParameters: AccountDepositPreValidationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDepositPreValidationResponse>;
    /**
     * Returns the committed details and receipt of the transaction for a given transaction identifier. Transaction identifiers which don\'t correspond to a committed transaction will return a `TransactionNotFoundError`.
     * Get Committed Transaction Details
     */
    transactionCommittedDetailsRaw(requestParameters: TransactionCommittedDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCommittedDetailsResponse>>;
    /**
     * Returns the committed details and receipt of the transaction for a given transaction identifier. Transaction identifiers which don\'t correspond to a committed transaction will return a `TransactionNotFoundError`.
     * Get Committed Transaction Details
     */
    transactionCommittedDetails(requestParameters: TransactionCommittedDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCommittedDetailsResponse>;
    /**
     * Returns information needed to construct a new transaction including current `epoch` number.
     * Get Construction Metadata
     */
    transactionConstructionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionConstructionResponse>>;
    /**
     * Returns information needed to construct a new transaction including current `epoch` number.
     * Get Construction Metadata
     */
    transactionConstruction(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionConstructionResponse>;
    /**
     * Preview a transaction against the latest network state, and returns the preview receipt. If the node has enabled it, you may be able to also preview against recent network state.  For V2 transactions (and beyond) the `/preview-v2` endpoint should be used instead.  This endpoint is effectively a proxy towards the Core API `/transaction/preview` endpoint. See the Core API documentation for more details.
     * Preview Transaction
     */
    transactionPreviewRaw(requestParameters: TransactionPreviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionPreviewResponse>>;
    /**
     * Preview a transaction against the latest network state, and returns the preview receipt. If the node has enabled it, you may be able to also preview against recent network state.  For V2 transactions (and beyond) the `/preview-v2` endpoint should be used instead.  This endpoint is effectively a proxy towards the Core API `/transaction/preview` endpoint. See the Core API documentation for more details.
     * Preview Transaction
     */
    transactionPreview(requestParameters: TransactionPreviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionPreviewResponse>;
    /**
     * Previews a transaction against the latest network state, and returns the preview receipt. If the node has enabled it, you may be able to also preview against recent network state.  This endpoint supports V2 transactions (and beyond). If you still need to preview V1 transactions, you should use the `/preview` endpoint instead.  This endpoint is effectively a proxy towards the Core API `/transaction/preview-v2` endpoint. See the Core API documentation for more details.
     * Preview Transaction V2
     */
    transactionPreviewV2Raw(requestParameters: TransactionPreviewV2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionPreviewV2Response>>;
    /**
     * Previews a transaction against the latest network state, and returns the preview receipt. If the node has enabled it, you may be able to also preview against recent network state.  This endpoint supports V2 transactions (and beyond). If you still need to preview V1 transactions, you should use the `/preview` endpoint instead.  This endpoint is effectively a proxy towards the Core API `/transaction/preview-v2` endpoint. See the Core API documentation for more details.
     * Preview Transaction V2
     */
    transactionPreviewV2(requestParameters: TransactionPreviewV2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionPreviewV2Response>;
    /**
     * Returns overall transaction status and all of its known payloads based on supplied intent hash.
     * Get Transaction Status
     */
    transactionStatusRaw(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionStatusResponse>>;
    /**
     * Returns overall transaction status and all of its known payloads based on supplied intent hash.
     * Get Transaction Status
     */
    transactionStatus(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionStatusResponse>;
    /**
     * Returns if the given subintent has been finalized.
     * Get Subintent Status
     */
    transactionSubintentStatusRaw(requestParameters: TransactionSubintentStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSubintentStatusResponse>>;
    /**
     * Returns if the given subintent has been finalized.
     * Get Subintent Status
     */
    transactionSubintentStatus(requestParameters: TransactionSubintentStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSubintentStatusResponse>;
    /**
     * Submits a signed transaction payload to the network.
     * Submit Transaction
     */
    transactionSubmitRaw(requestParameters: TransactionSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSubmitResponse>>;
    /**
     * Submits a signed transaction payload to the network.
     * Submit Transaction
     */
    transactionSubmit(requestParameters: TransactionSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSubmitResponse>;
}
