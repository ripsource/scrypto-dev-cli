"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataExtractor = exports.s = exports.GatewayEzMode = void 0;
const gatewayClient_1 = require("./gatewayClient");
const sbor_ez_mode_1 = __importDefault(require("@calamari-radix/sbor-ez-mode"));
exports.s = sbor_ez_mode_1.default;
const state_1 = require("./services/state");
const domain_1 = require("./services/domain");
const status_1 = require("./services/status");
const transaction_1 = require("./services/transaction");
const stream_1 = require("./services/stream");
/**
 * A wrapper around the GatewayApiClient that provides
 * a more user-friendly interface for common tasks.
 */
class GatewayEzMode {
    /**
     * The GatewayApiClient instance used for API calls.
     * @remarks It's public, so you can use it if you need more advanced gateway usage.
     */
    gateway;
    /**
     * A service for querying state-related data.
     */
    state;
    /**
     * A service for querying information related to XRD Domains.
     */
    domains;
    /**
     * A service for querying gateway or netrowk status.
     */
    status;
    /**
     * A service for transaction-related operations.
     */
    transaction;
    /**
     * A service related to streaming transaction data.
     */
    stream;
    /**
     * Creates a new GatewayEzMode instance.
     * @param gateway Optional GatewayApiClient instance to use for API calls.
     */
    constructor(gateway) {
        if (gateway) {
            this.gateway = gateway;
        }
        else {
            this.gateway = (0, gatewayClient_1.defaultGatewayClient)();
        }
        this.state = new state_1.StateService(this.gateway);
        this.domains = new domain_1.DomainService(this.state);
        this.status = new status_1.StatusService(this.gateway);
        this.transaction = new transaction_1.TransactionService(this.gateway);
        this.stream = new stream_1.StreamService(this.gateway);
    }
}
exports.GatewayEzMode = GatewayEzMode;
var metadata_1 = require("./data_extractors/metadata");
Object.defineProperty(exports, "MetadataExtractor", { enumerable: true, get: function () { return metadata_1.MetadataExtractor; } });
__exportStar(require("./error"), exports);
