import { GatewayApiClient, TransactionStatusResponse } from '@radixdlt/babylon-gateway-api-sdk';
export declare class TransactionPollingError extends Error {
    constructor(message: string);
}
export declare class TransactionPollingAbortedError extends TransactionPollingError {
    constructor();
}
export declare class TransactionPollingTimeoutError extends TransactionPollingError {
    constructor();
}
/**
 * Options for polling transaction status
 * @property abortSignal - AbortSignal to cancel polling
 * @property baseDelay - Initial delay between polls in milliseconds (default: 1000)
 * @property maxRetries - Maximum number of polling attempts (default: 10)
 * @property maxDelay - Maximum delay between polls in milliseconds (default: 10000)
 * @property delayFn - Custom function to calculate delay between polls based on retry count
 * @property gatewayApiClient - Custom GatewayApiClient instance (default: new instance with networkId 1)
 */
export type PollTransactionStatusOptions = Partial<{
    abortSignal: AbortSignal;
    baseDelay: number;
    maxRetries: number;
    maxDelay: number;
    delayFn: (retry: number) => number;
    gatewayApiClient?: GatewayApiClient;
}>;
/**
 * Poll the status of a transaction until it is not pending.
 * @param transactionId - The ID of the transaction to poll.
 * @param options - Options for the polling.
 * @returns A promise that resolves to the transaction status.
 * @throws {TransactionPollingAbortedError} If the polling is aborted.
 * @throws {TransactionPollingTimeoutError} If the polling times out.
 */
export declare const pollTransactionStatus: (transactionId: string, options?: PollTransactionStatusOptions) => Promise<TransactionStatusResponse>;
