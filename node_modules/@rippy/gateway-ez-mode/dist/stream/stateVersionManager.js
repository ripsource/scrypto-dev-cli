"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateVersionManager = void 0;
const error_1 = require("../error");
class StateVersionManager {
    stateVersion;
    gatewayApi;
    constructor({ gatewayApi, startStateVersion, }) {
        this.gatewayApi = gatewayApi;
        this.stateVersion = startStateVersion;
    }
    /**
     * @returns The current state version of the Radix network.
     * @throws {GatewayError} If an error occurs while fetching.
     */
    async getCurrentStateVersion() {
        let status;
        try {
            status = await this.gatewayApi.status.getCurrent();
        }
        catch (error) {
            throw new error_1.GatewayError(error);
        }
        return status.ledger_state.state_version;
    }
    /**
     * Get the current state version.
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    getStateVersion() {
        return this.stateVersion
            ? Promise.resolve(this.stateVersion)
            : this.getCurrentStateVersion();
    }
    setStateVersion(value) {
        this.stateVersion = value;
    }
}
exports.StateVersionManager = StateVersionManager;
