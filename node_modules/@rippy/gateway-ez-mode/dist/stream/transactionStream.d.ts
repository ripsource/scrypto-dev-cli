import { StateVersionManager } from './stateVersionManager';
import { CommittedTransactionInfo, GatewayApiClient } from '@radixdlt/babylon-gateway-api-sdk';
export interface TransactionStreamInput {
    gateway: GatewayApiClient;
    startStateVersion: number;
    batchSize: number;
    affected_entities?: string[];
    opt_ins?: {
        detailed_events: boolean;
        manifest_instructions: boolean;
        affected_global_entities: boolean;
        balance_changes: boolean;
    };
    stateVersionManager: StateVersionManager;
}
export interface TransactionStreamOutput {
    lastSeenStateVersion: number;
    transactions: CommittedTransactionInfo[];
}
/**
 * A stream of transactions from the Radix network. Allows you to
 * eaily fetch transactions in chronological order as they are
 * committed to the ledger.
 */
export declare class TransactionStream {
    gateway: GatewayApiClient;
    startStateVersion: number;
    batchSize: number;
    affected_entities?: string[];
    opt_ins?: {
        detailed_events: boolean;
        manifest_instructions: boolean;
        affected_global_entities: boolean;
        balance_changes: boolean;
    };
    stateVersionManager: StateVersionManager;
    constructor({ gateway, startStateVersion, batchSize, opt_ins, affected_entities, stateVersionManager, }: TransactionStreamInput);
    /**
     * Create a new TransactionStream instance.
     *
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    static create(input: Partial<TransactionStreamInput>): Promise<TransactionStream>;
    /**
     * Get the last seen state version. This is the state version of the last
     * transaction that was fetched from the stream.
     * @returns The last seen state version.
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    lastSeenStateVersion(): Promise<number>;
    /**
     * Fetch the next batch of transactions from the stream.
     * @returns A promise that resolves with the next batch of transactions
     * from the stream. Once the stream is caught up with ledger, it may return an empty array
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    next(): Promise<TransactionStreamOutput>;
}
