"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataExtractor = void 0;
class MetadataExtractor {
    metadataItems;
    constructor(metadataItems) {
        this.metadataItems = metadataItems;
    }
    /**
     * Get the raw metadata items of the resource
     * @returns
     */
    getMetadataItemsRaw() {
        return this.metadataItems;
    }
    /**
     * Get a single metadata value by field name
     * @param field_name The field name of the metadata value
     * @param type The type of the metadata value
     * @returns The metadata value or null if not found / type mismatch
     */
    getMetadataValue(field_name, type) {
        const item = this.metadataItems.items.find((item) => item.key === field_name);
        if (!item)
            return null;
        if (item.value.typed.type !== type)
            return null;
        // If it's one of the array kinds, return `values`, else `value`
        if ('values' in item.value.typed) {
            return item.value.typed.values;
        }
        else if ('value' in item.value.typed) {
            return item.value.typed.value;
        }
        else {
            throw new Error('metadata value should either have `value` or `values`');
        }
    }
    /**
     * Get multiple metadata values by field name
     * @param descriptions An object where the keys are field names and the values are the types of the metadata values
     * @returns An object where the keys are field names and the values are the metadata values or null if not found / type mismatch
     * @example
     * ```ts
     * const { symbol, name, tags } = resource.getMetadataValues({
     *    symbol: 'String',
     *    name: 'String',
     *    tags: 'StringArray',
     * })
     * symbol // string | null
     * name // string | null
     * tagas // string[] | null
     * ```
     */
    getMetadataValuesBatch(descriptions) {
        return Object.fromEntries(Object.entries(descriptions).map(([field_name, type]) => [
            field_name,
            this.getMetadataValue(field_name, type),
        ]));
    }
}
exports.MetadataExtractor = MetadataExtractor;
