"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusService = void 0;
const error_1 = require("../error");
class StatusService {
    gateway;
    constructor(gateway) {
        this.gateway = gateway;
    }
    /**
     * Fetches the current state version of the network.
     * @returns The current state version of the network
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    async getCurrentStateVersion() {
        let status;
        try {
            status = await this.gateway.status.getCurrent();
        }
        catch (error) {
            throw new error_1.GatewayError(error);
        }
        return status.ledger_state.state_version;
    }
    /**
     * Fetches the current epoch of the network
     * @returns The current epoch of the network
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    async getCurrentEpoch() {
        let status;
        try {
            status = await this.gateway.status.getCurrent();
        }
        catch (error) {
            throw new error_1.GatewayError(error);
        }
        return status.ledger_state.epoch;
    }
    /**
     * Get the well-known addresses of the network. This includes things like the XRD address,
     * a bunch of internal packages, the faucet and more.
     * @returns The well-known addresses of the network
     * @throws {GatewayError} If an error occurs while fetching data from the Radix Gateway API
     */
    async getWellKnownAddresses() {
        let config;
        try {
            config = await this.gateway.status.getNetworkConfiguration();
        }
        catch (error) {
            throw new error_1.GatewayError(error);
        }
        return config.well_known_addresses;
    }
}
exports.StatusService = StatusService;
