import { GatewayApiClient } from '@radixdlt/babylon-gateway-api-sdk';
import { ComponentInfo, FungibleResourceBalance, NftBalance, ResourceInfo } from '../types';
export declare class StateService {
    private gateway;
    constructor(gateway: GatewayApiClient);
    /**
     * Fetches fungible balances for a given component address.
     * @param address The address of the component to fetch fungible balances for
     * @returns A list of fungible balances
     * @throws {GatewayError} If an error occurs while fetching from the Radix Gateway.
     * @throws {IncorrectAddressType} If the address is not of the correct
     * type.
     */
    getComponentFungibleBalances(address: string): Promise<FungibleResourceBalance[]>;
    /**
     * Fetches non-fungible balances for a given component address.
     * @param address The address of the component to fetch non-fungible balances for
     * @returns A list of non-fungible balances
     * @throws {GatewayError} If an error occurs while fetching from the Radix Gateway.
     * @throws {IncorrectAddressType} If the address is not of the correct type.
     */
    getComponentNonFungibleBalances(address: string): Promise<NftBalance[]>;
    /**
     * Fetches information about a resource, like name, symbol, description, etc.
     * @param resourceAddress

     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a resource.
     * @throws {MissingFieldError} If a field that was expected to be present was missing.
     */
    getResourceInfo(resourceAddress: string): Promise<ResourceInfo>;
    /**
     * Fetches information about multiple resources in a single call.
     * @param resourceAddresses
     * @returns The resource information
     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a resource.
     * @throws {MissingFieldError} If a field that was expected to be present was missing.
     */
    getResourceInfoBatch(resourceAddresses: string[]): Promise<ResourceInfo[]>;
    /**
     * Fetches information about a component, like name, description, etc.
     * This can be any Radix component, including accounts and other special components.
     * @param address The address of the component
     * @returns The component information
     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a component.
     */
    getComponentInfo(address: string): Promise<ComponentInfo>;
    /**
     * Fetches information about multiple components in a single call.
     * @param addresses The addresses of the components
     * @returns The component information
     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a component.
     */
    getComponentInfoBatch(addresses: string[]): Promise<ComponentInfo[]>;
}
