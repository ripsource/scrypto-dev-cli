"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateService = void 0;
const fungibleBalances_1 = require("../balance/fungibleBalances");
const nftBalances_1 = require("../balance/nftBalances");
const information_1 = require("../resource/information");
const component_1 = require("../component/component");
class StateService {
    gateway;
    constructor(gateway) {
        this.gateway = gateway;
    }
    /**
     * Fetches fungible balances for a given component address.
     * @param address The address of the component to fetch fungible balances for
     * @returns A list of fungible balances
     * @throws {GatewayError} If an error occurs while fetching from the Radix Gateway.
     * @throws {IncorrectAddressType} If the address is not of the correct
     * type.
     */
    async getComponentFungibleBalances(address) {
        return (0, fungibleBalances_1.getFungibleBalancesForComponent)(this.gateway, address);
    }
    /**
     * Fetches non-fungible balances for a given component address.
     * @param address The address of the component to fetch non-fungible balances for
     * @returns A list of non-fungible balances
     * @throws {GatewayError} If an error occurs while fetching from the Radix Gateway.
     * @throws {IncorrectAddressType} If the address is not of the correct type.
     */
    async getComponentNonFungibleBalances(address) {
        return (0, nftBalances_1.getNonFungibleBalancesForComponent)(this.gateway, address);
    }
    /**
     * Fetches information about a resource, like name, symbol, description, etc.
     * @param resourceAddress

     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a resource.
     * @throws {MissingFieldError} If a field that was expected to be present was missing.
     */
    async getResourceInfo(resourceAddress) {
        return (await (0, information_1.fetchResourceInformation)(this.gateway, [resourceAddress]))[0];
    }
    /**
     * Fetches information about multiple resources in a single call.
     * @param resourceAddresses
     * @returns The resource information
     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a resource.
     * @throws {MissingFieldError} If a field that was expected to be present was missing.
     */
    async getResourceInfoBatch(resourceAddresses) {
        return (0, information_1.fetchResourceInformation)(this.gateway, resourceAddresses);
    }
    /**
     * Fetches information about a component, like name, description, etc.
     * This can be any Radix component, including accounts and other special components.
     * @param address The address of the component
     * @returns The component information
     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a component.
     */
    async getComponentInfo(address) {
        return (await (0, component_1.fetchComponentInformation)(this.gateway, [address]))[0];
    }
    /**
     * Fetches information about multiple components in a single call.
     * @param addresses The addresses of the components
     * @returns The component information
     * @throws {GatewayError} If an error occurs while fetching the information.
     * @throws {IncorrectAddressType} If the resource returned by the gateway call is not actually a component.
     */
    getComponentInfoBatch(addresses) {
        return (0, component_1.fetchComponentInformation)(this.gateway, addresses);
    }
}
exports.StateService = StateService;
