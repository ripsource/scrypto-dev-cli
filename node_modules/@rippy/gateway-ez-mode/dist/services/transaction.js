"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionService = void 0;
const pollTransactionStatus_1 = require("../transactionStatus/pollTransactionStatus");
class TransactionService {
    gateway;
    constructor(gateway) {
        this.gateway = gateway;
    }
    /**
     * Poll the status of a transaction until it is in a 'final' state, either failed or succeeded.
     * @param transactionId The transaction id / intent hash of the transaction to poll.
     * @param options Options for polling.
     * @returns A promise that resolves with the transaction
     * status as soon as the transaction is in a final state.
     *
     * @example
     * ```typescript
     * const transactionId = sendTransaction();
     * let transactionStatus;
     * try {
     *   transactionStatus = await gatewayEzMode.pollTransactionStatus(transactionId);
     * } catch (error) {
     *   console.error('Failed polling:', error);
     * }
     * console.log("Transaction resolved with status:", transactionStatus);
     * ```
     * @throws {TransactionPollingAbortedError} If the polling is aborted.
     * @throws {TransactionPollingTimeoutError} If the polling times out.
     */
    pollTransactionStatus(transactionId, options) {
        return (0, pollTransactionStatus_1.pollTransactionStatus)(transactionId, {
            ...(options || {}),
            gatewayApiClient: this.gateway,
        });
    }
}
exports.TransactionService = TransactionService;
