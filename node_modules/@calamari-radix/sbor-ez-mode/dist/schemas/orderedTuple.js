"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderedTupleSchema = void 0;
const sborSchema_1 = require("../sborSchema");
class OrderedTupleSchema extends sborSchema_1.SborSchema {
    schemas;
    constructor(schemas) {
        super(['Tuple']);
        this.schemas = schemas;
    }
    validate(value, path) {
        if (!value ||
            typeof value !== 'object' ||
            !('kind' in value) ||
            value.kind !== 'Tuple') {
            throw new sborSchema_1.SborError('Invalid tuple structure', path);
        }
        const tupleValue = value;
        const fields = tupleValue.fields;
        if (fields.length !== this.schemas.length) {
            throw new sborSchema_1.SborError(`Expected ${this.schemas.length} fields, got ${fields.length}`, path);
        }
        return this.schemas.every((schema, index) => {
            const field = fields[index];
            if (!field)
                return false;
            if (!schema.kinds.includes(field.kind)) {
                throw new sborSchema_1.SborError(`Expected kind ${schema.kinds}, got ${field.kind}`, [...path, index.toString()]);
            }
            return schema.validate(field, [...path, index.toString()]);
        });
    }
    parse(value, path) {
        this.validate(value, path);
        const tupleValue = value;
        const fields = tupleValue.fields;
        return fields.map((field, index) => {
            const schema = this.schemas[index];
            return schema.parse(field, [...path, index.toString()]);
        });
    }
}
exports.OrderedTupleSchema = OrderedTupleSchema;
