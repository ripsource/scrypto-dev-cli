"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapSchema = void 0;
const sborSchema_1 = require("../sborSchema");
class MapSchema extends sborSchema_1.SborSchema {
    definition;
    constructor(definition) {
        super(['Map']);
        this.definition = definition;
    }
    validate(value, path) {
        if (!value ||
            typeof value !== 'object' ||
            !('kind' in value) ||
            value.kind !== 'Map') {
            throw new sborSchema_1.SborError('Invalid map structure', path);
        }
        const entries = value.entries;
        return entries.every((entry, index) => {
            if (!entry.key || !entry.value) {
                throw new sborSchema_1.SborError('Invalid map entry', [
                    ...path,
                    index.toString(),
                ]);
            }
            return (this.definition.key.validate(entry.key, [
                ...path,
                index.toString(),
            ]) &&
                this.definition.value.validate(entry.value, [
                    ...path,
                    index.toString(),
                ]));
        });
    }
    parse(value, path) {
        this.validate(value, path);
        const mapValue = value;
        const entries = mapValue.entries;
        return new Map(entries.map((entry, index) => [
            this.definition.key.parse(entry.key, [
                ...path,
                index.toString(),
            ]),
            this.definition.value.parse(entry.value, [
                ...path,
                index.toString(),
            ]),
        ]));
    }
}
exports.MapSchema = MapSchema;
