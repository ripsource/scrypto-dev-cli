import { ProgrammaticScryptoSborValue } from '@radixdlt/babylon-gateway-api-sdk';
import { SborSchema } from '../sborSchema';
import { ParsedType, StructSchema } from './struct';
import { OrderedTupleSchema } from './orderedTuple';
export interface VariantDefinition<S extends StructSchema<any, any> | OrderedTupleSchema<any>> {
    variant: string;
    schema: S;
}
type VariantParsedType<T extends VariantDefinition<any>> = T['schema'] extends StructSchema<infer U, any> ? {
    [K in keyof U]: ParsedType<U[K]>;
} : T['schema'] extends OrderedTupleSchema<infer U> ? {
    [K in keyof U]: ParsedType<U[K]>;
} : never;
export type EnumParsedType<T extends VariantDefinition<any>[]> = {
    [K in keyof T]: T[K] extends VariantDefinition<infer S> ? S extends StructSchema<any, any> ? {
        variant: T[K]['variant'];
        value: VariantParsedType<T[K]>;
    } : S extends OrderedTupleSchema<any> ? {
        variant: T[K]['variant'];
        value: VariantParsedType<T[K]>;
    } : never : never;
}[number];
export declare class EnumSchema<T extends VariantDefinition<any>[]> extends SborSchema<{
    [K in keyof T]: T[K] extends VariantDefinition<any> ? {
        variant: T[K]['variant'];
        value: VariantParsedType<T[K]>;
    } : never;
}[number]> {
    private variants;
    constructor(variants: T);
    validate(value: ProgrammaticScryptoSborValue, path: string[]): boolean;
    parse(value: ProgrammaticScryptoSborValue, path: string[]): EnumParsedType<T>;
}
export {};
