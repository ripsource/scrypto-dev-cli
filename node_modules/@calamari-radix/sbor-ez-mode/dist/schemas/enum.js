"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumSchema = void 0;
const sborSchema_1 = require("../sborSchema");
class EnumSchema extends sborSchema_1.SborSchema {
    variants;
    constructor(variants) {
        super(['Enum']);
        this.variants = new Map(variants.map((v) => [v.variant, v]));
    }
    validate(value, path) {
        if (!value ||
            typeof value !== 'object' ||
            !('kind' in value) ||
            value.kind !== 'Enum') {
            throw new sborSchema_1.SborError('Invalid enum structure', path);
        }
        const enumValue = value;
        // Validate variant exists
        const variantName = enumValue.variant_name;
        if (!variantName || !this.variants.has(variantName)) {
            throw new sborSchema_1.SborError(`Unknown variant: ${variantName || 'undefined'}`, path);
        }
        const variantDef = this.variants.get(variantName);
        // If the variant has no schema (empty variant), fields should be empty
        if (!variantDef.schema) {
            if (enumValue.fields.length > 0) {
                throw new sborSchema_1.SborError(`Empty variant ${variantName} should have no fields`, path);
            }
            return true;
        }
        // Validate the variant's contents using its schema
        const tupleValue = {
            kind: 'Tuple',
            fields: enumValue.fields,
            field_name: enumValue.field_name,
            type_name: enumValue.type_name,
        };
        return variantDef.schema.validate(tupleValue, [...path, variantName]);
    }
    parse(value, path) {
        this.validate(value, path);
        const enumValue = value;
        const variantName = enumValue.variant_name;
        const variantDef = this.variants.get(variantName);
        // Empty variant
        if (!variantDef.schema) {
            return { variant: variantName };
        }
        // Parse variant with contents
        const tupleValue = {
            kind: 'Tuple',
            fields: enumValue.fields,
            field_name: enumValue.field_name,
            type_name: enumValue.type_name,
        };
        return {
            variant: variantName,
            value: variantDef.schema.parse(tupleValue, [...path, variantName]),
        };
    }
}
exports.EnumSchema = EnumSchema;
