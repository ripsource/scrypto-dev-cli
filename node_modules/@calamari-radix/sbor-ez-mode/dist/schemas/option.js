"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionSchema = void 0;
const sborSchema_1 = require("../sborSchema");
class OptionSchema extends sborSchema_1.SborSchema {
    innerSchema;
    constructor(innerSchema) {
        super(['Enum']);
        this.innerSchema = innerSchema;
    }
    validate(value, path) {
        if (!value ||
            typeof value !== 'object' ||
            !('kind' in value) ||
            value.kind !== 'Enum') {
            throw new sborSchema_1.SborError('Invalid enum structure', path);
        }
        const enumValue = value;
        if (enumValue.variant_name === 'None') {
            if (enumValue.fields.length !== 0) {
                throw new sborSchema_1.SborError('Invalid enum None variant', path);
            }
            return true;
        }
        else {
            if (enumValue.variant_name !== 'Some') {
                throw new sborSchema_1.SborError('Invalid enum variant', path);
            }
            if (enumValue.fields.length !== 1) {
                throw new sborSchema_1.SborError('Invalid enum Some variant', path);
            }
            return this.innerSchema.validate(enumValue.fields[0], path);
        }
    }
    parse(value, path) {
        this.validate(value, path);
        const enumValue = value;
        if (enumValue.variant_name === 'None') {
            return { variant: 'None' };
        }
        else {
            return {
                variant: 'Some',
                value: this.innerSchema.parse(enumValue.fields[0], path),
            };
        }
    }
}
exports.OptionSchema = OptionSchema;
