import { ProgrammaticScryptoSborValue } from '@radixdlt/babylon-gateway-api-sdk';
import { SborSchema } from '../sborSchema';
export interface StructDefinition {
    [key: string]: SborSchema<unknown>;
}
export type ParsedType<T extends SborSchema<unknown>> = T extends SborSchema<infer U> ? U : never;
export declare class StructSchema<T extends StructDefinition, O extends boolean = false> extends SborSchema<{
    [K in keyof T]: O extends true ? ParsedType<T[K]> | null : ParsedType<T[K]>;
}> {
    private definition;
    private allowMissing;
    /**
     * @param definition The struct definition.
     * @param allowMissing If true, missing fields are allowed and parsed as `null`;
     *                     if false, missing fields will be a parsing error.
     */
    constructor(definition: T, allowMissing: O);
    validate(value: ProgrammaticScryptoSborValue, path: string[]): boolean;
    parse(value: ProgrammaticScryptoSborValue, path: string[]): {
        [K in keyof T]: O extends true ? ParsedType<T[K]> | null : ParsedType<T[K]>;
    };
}
